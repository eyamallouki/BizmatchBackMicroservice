
server.port=9093
### DATABASE ###


spring.application.name=servicePartenariat
server.port=9085
spring.application.name=servicepartenariatMS


spring.datasource.url=jdbc:mysql://localhost:3306/testrole?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=
spring.jpa.show-sql=true

spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.main.allow-circular-references=true
##spring.main.allow-circular-references =

## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=your-group-id
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# Threshold after which files are written to disk.

## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
file.upload=C:/downloadFile/

spring.jpa.hibernate.ddl-auto=create
spring.main.allow-circular-references =true

spring.security.oauth2.client.registration.linkedin.client-id=VOTRE_CLIENT_ID_LINKEDIN
spring.security.oauth2.client.registration.linkedin.client-secret=VOTRE_CLIENT_SECRET_LINKEDIN
spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile,r_emailaddress
spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.linkedin.client-name=LinkedIn


